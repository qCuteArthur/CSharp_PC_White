using System;

namespace BS_事件
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
        }
    }
}
//委托类型字段和事件之间的差别。。。。。
//事件是一种类型成员
//事件就是可以发生的事情。。。。

//角色——使得对象或者类具有通知能力的成员，事件都是有自己隶属的主体的。

//event是一种使得对象或者类能够提供通知的成员。
//事件就是使得类或者对象可以提供通知。
//比如手机响铃，就是手机有一个具备通知别人的能力。手机的角度是在通知，人的角度，人是在接受信息EventArgs。人可以根据eventArgs进行自己的行为。
//eventHandler就是专门应对不同的EvntArgs做出反应的参数

//事件的发生，包括了那种需要参数的类似于Func，和那个中不需要参数的，时间发生的本身就够了，类似于Action。

//时间的角色 = 通知+可选的事件参数EventArgs 
//而处理事件的就是EventHandler.
//用于类或者对象之间的动作协调或者是信息传递

//event model 发生相应模型——事件发生 我关注着这个事件（订阅） 我相应 ，就比如别人手机响了，我不会有反应，而我的手机响了我才会有反应。
//事件和类之间，需要建立订阅关系。

//事件的动作——有事件 有订阅关系 事件发生 对象或者类会被通知 对象或者类会进行反应。

//通知 事件响应 事件模型 事件处理器 订阅
//事件订阅者 事件参数 

//事件应用——客户端——事件驱动的程序——GUI

//把事件理解为一种现实世界的抽象，JS JAVA OC都是有这种事件的实现的。

//事件模式——牵扯到的元素比较多，逻辑比较混乱。

//MVC MVP MVVM就是三种架构模式

//_____________________________________第一节———————
//——————————————————第二节————————

//事件拥有者，eventSource ，一定是对象或者是类
//event 是通知别人的工具，使得类或者对象有通知能力，控件（类）有通知能力，事件不会主动发生，一定会被其他的事件所触发。
//GUI的最基本是鼠标和键盘，操作系统时刻在追踪这个鼠标指针的位置，判断当前的窗口是不是处于激活状态。

//按下之后——首先是操作系统把按照按钮被按的事件通知给按钮，然后是按钮自己的重新绘制，按钮记录自己的状态为按下。
//用户松开鼠标，按钮重新绘制自己的，但是按钮自己会记录为Click事件。——是按钮自己触发了click事件。

//事件响应者——class object，一定有事件处理器。event handler作为事件subscribe对象的一个成员，本质上是回调。

//事件订阅——事件发生的时候，什么东西会被通知到？
    //事件发生的（孩子迷路事件）
    //事件发生的地理信息？？内存地址吧（还在迷路事件）
//用于订阅事件的事件处理器必须相关联——委托。。。。
//事件event Args，用什么方法处理事件

    //事件应用分类
    //两个不同的类，一个类，一个类和他自己的嵌套类。
    //窗口里面有个按钮，按钮有一个click事件，用这个方法订阅这个事件。





